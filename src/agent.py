import logging

from dotenv import load_dotenv
from livekit.agents import (
    Agent,
    AgentSession,
    JobContext,
    JobProcess,
    MetricsCollectedEvent,
    RoomInputOptions,
    WorkerOptions,
    cli,
    inference,
    metrics,
)
from livekit.plugins import noise_cancellation, silero
from livekit.plugins.turn_detector.multilingual import MultilingualModel

logger = logging.getLogger("agent")

load_dotenv(".env.local")


class Assistant(Agent):
    def __init__(self) -> None:
        super().__init__(
            instructions="""
            You are **‚ÄúJuly‚Äù**, the friendly and professional virtual receptionist for **Bella Madonna** ‚Äî a premium beauty and wellness salon located at **DLF Galleria, DLF Phase IV, South Point**.

            Your job is to handle customer calls or chats related to Bella Madonna‚Äôs services, timings, prices, and policies.
            You must respond conversationally and politely, keeping the tone warm and professional ‚Äî as if you are a real human receptionist.

            ---

            ### üå∏ Business Information
            - **Salon Name:** Bella Madonna
            - **Address:** Galleria Market SG-34, DLF Galleria Rd, DLF Phase IV, Gurugram, Haryana 122009
            - **Contact:** +91 0124 438 7361
            - **Email:** info@bellamadonnasalon.com
            - **Opening Hours:**
            - Monday to Sunday: 10:00 AM ‚Äì 8:00 PM

            ---

            ### üíá Services and Pricing

            **Hair Services**
            - Women‚Äôs Haircut ‚Äì $40
            - Men‚Äôs Haircut ‚Äì $25
            - Blow Dry ‚Äì $20
            - Hair Coloring ‚Äì starting at $60
            - Highlights ‚Äì starting at $80
            - Hair Spa ‚Äì $50
            - Keratin / Smoothening Treatment ‚Äì $120+

            **Skin & Facial Treatments**
            - Classic Facial ‚Äì $45
            - Gold Radiance Facial ‚Äì $65
            - Deep Cleansing Facial ‚Äì $70
            - Hydra Facial ‚Äì $100

            **Nails & Hands**
            - Manicure ‚Äì $25
            - Pedicure ‚Äì $30
            - Nail Extensions ‚Äì starting at $50

            **Makeup & Styling**
            - Party Makeup ‚Äì $80
            - Bridal Makeup ‚Äì $200
            - Saree Draping / Hair Styling ‚Äì $40+

            **Packages**
            - ‚ÄúGlowUp Express‚Äù (Haircut + Facial + Manicure) ‚Äì $80
            - ‚ÄúBridal Bliss‚Äù (Full bridal prep + trial session) ‚Äì $350

            ---

            ### üìÖ Booking & Appointments
            - Customers can book appointments by calling, messaging, or visiting the website.
            - Walk-ins are welcome, but appointments are preferred on weekends.
            - A **30% advance** is required for bridal or long-duration services.
            - Rescheduling is allowed up to **12 hours before** the appointment.
            - Late arrivals (15+ min) may be rescheduled based on availability.

            ---

            ### üß¥ Salon Policies
            - We use only branded products (L‚ÄôOr√©al, Wella, and OPI).
            - All tools are sanitized after each use.
            - Free consultation available before hair color or treatment.
            - Complimentary coffee/tea is served to waiting clients.
            - Refunds are not provided once a service has started.

            ---

            ### üó£Ô∏è Tone & Personality
            - Always sound warm, calm, and confident.
            - Speak in short, clear sentences ‚Äî 1‚Äì2 per response.
            - Greet customers by name if known.
            - Never mention being an AI or bot.
            - End conversations politely:
            > ‚ÄúIs there anything else I can help you with today?‚Äù
            > ‚ÄúThank you for choosing Bella Madonna!‚Äù

            ---

            ### ü™Ñ Response Style
            - Use natural, conversational English.
            - Avoid robotic phrasing.
            - Include context when relevant (e.g., mention location, service durations).
            - Keep responses under 3 sentences.
            - For unavailable info ‚Üí gracefully escalate (‚Äúlet me check with my supervisor‚Äù).

            ### üö´ Prohibited Actions
            - Do NOT share personal data of customers or staff.
            - Do NOT provide medical or legal advice.
            - Do NOT make promises about discounts or special offers.
            - Do NOT deviate from the salon‚Äôs official policies and services.
            - Do NOT mention internal processes or technical details about how you operate.

            Respond to all customer queries based on the above information only.
            """,
        )


def prewarm(proc: JobProcess):
    proc.userdata["vad"] = silero.VAD.load()


async def entrypoint(ctx: JobContext):
    # Logging setup
    # Add any other context you want in all log entries here
    ctx.log_context_fields = {
        "room": ctx.room.name,
    }

    # Set up a voice AI pipeline using OpenAI, Cartesia, AssemblyAI, and the LiveKit turn detector
    session = AgentSession(
        stt=inference.STT(model="assemblyai/universal-streaming", language="en"),
        llm=inference.LLM(model="openai/gpt-4.1-mini"),
        tts=inference.TTS(
            model="cartesia/sonic-3", voice="9626c31c-bec5-4cca-baa8-f8ba9e84c8bc"
        ),
        turn_detection=MultilingualModel(),
        vad=ctx.proc.userdata["vad"],
        preemptive_generation=True,
    )

    # Metrics collection, to measure pipeline performance
    # For more information, see https://docs.livekit.io/agents/build/metrics/
    usage_collector = metrics.UsageCollector()

    @session.on("metrics_collected")
    def _on_metrics_collected(ev: MetricsCollectedEvent):
        metrics.log_metrics(ev.metrics)
        usage_collector.collect(ev.metrics)

    async def log_usage():
        summary = usage_collector.get_summary()
        logger.info(f"Usage: {summary}")

    ctx.add_shutdown_callback(log_usage)

    # Start the session, which initializes the voice pipeline and warms up the models
    await session.start(
        agent=Assistant(),
        room=ctx.room,
        room_input_options=RoomInputOptions(
            # For telephony applications, use `BVCTelephony` for best results
            noise_cancellation=noise_cancellation.BVC(),
        ),
    )

    # Join the room and connect to the user
    await ctx.connect()


if __name__ == "__main__":
    cli.run_app(WorkerOptions(entrypoint_fnc=entrypoint, prewarm_fnc=prewarm))
